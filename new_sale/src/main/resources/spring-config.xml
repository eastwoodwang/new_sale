<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task-3.0.xsd"
       default-lazy-init="true">

    <context:property-placeholder location="classpath:resources.properties" ignore-resource-not-found="true"/>

    <!-- 扫描注解 -->
    <context:component-scan base-package="com.ns.warlock">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>


    <!-- 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${connection.url}"/>
        <property name="username" value="${connection.username}"/>
        <property name="password" value="${connection.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}" />

    </bean>

    <!-- mybatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis.xml" />
        <property name="mapperLocations">
            <list>
                <value>classpath*:mapper/*.xml</value>
                <value>classpath*:mapper/**/*.xml</value>
            </list>
        </property>
    </bean>

    <bean id="defaultLobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true"/>
    <!-- 查 找 类 路 径 下 的 映 射 器 并 自 动 将 它 们 创 建 成 MapperFactoryBean-->
    <bean id="userMapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ns.warlock.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <bean id="dataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <property name="targetDataSource" ref="dataSource"/>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="dataSourceProxy"/>
    </bean>

    <!--事务管理器配置-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceProxy"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!--
    <aop:config expose-proxy="true" proxy-target-class="true">
        只对业务逻辑层实施事务
        <aop:pointcut id="txPointcut" expression="execution(* com..service..*+.*(..))"/>
        <aop:advisor id="txAdvisor" advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>-->

    <!--spring工具类-->
    <bean class="com.ns.warlock.util.SpringUtils"></bean>

    <!-- 引入同文件夹下的shiro属性配置文件 -->
    <import resource="classpath:shiro-config.xml"/>

    <!-- Freemaker和Spring的处理 -->
    <bean id="freeMarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPaths" value="${template.loader_path}" />
        <property name="freemarkerSettings">
            <props>
                <prop key="defaultEncoding">${template.encoding}</prop>
                <prop key="url_escaping_charset">${url_escaping_charset}</prop>
                <prop key="locale">${locale}</prop>
                <prop key="template_update_delay">${template.update_delay}</prop>
                <prop key="tag_syntax">auto_detect</prop>
                <prop key="whitespace_stripping">true</prop>
                <prop key="classic_compatible">true</prop>
                <prop key="number_format">${template.number_format}</prop>
                <prop key="boolean_format">${template.boolean_format}</prop>
                <prop key="datetime_format">${template.datetime_format}</prop>
                <prop key="date_format">${template.date_format}</prop>
                <prop key="time_format">${template.time_format}</prop>
                <prop key="object_wrapper">freemarker.ext.beans.BeansWrapper</prop>
            </props>
        </property>
        <property name="freemarkerVariables">
            <map>
                <entry key="base" value="#{servletContext.contextPath}" />
                <entry key="locale" value="${locale}" />
                <entry key="message" value-ref="messageMethod" />
                <entry key="setting" value="#{T(com.ns.warlock.util.SettingUtils).get()}" />
                <entry key="flash_message" value-ref="flashMessageDirective" />
            </map>
        </property>
    </bean>

    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="cacheSeconds" value="${message.cache_seconds}" />
        <property name="useCodeAsDefaultMessage" value="true" />
        <property name="basenames">
            <list>
                <value>${message.admin_path}</value>
                <value>${message.common_path}</value>
            </list>
        </property>
    </bean>

    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.FixedLocaleResolver">
        <property name="defaultLocale" value="${locale}" />
    </bean>


    <!-- 验证码生成器 -->
    <bean id="imageCaptchaService" class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService">
        <property name="captchaEngine">
            <bean class="com.ns.warlock.CaptchaEngine" />
        </property>
        <property name="minGuarantedStorageDelayInSeconds" value="3600" />
    </bean>

    <!-- shiro的缓存管理器 -->
    <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:/ehcache.xml" />
        <property name="shared" value="true" />
    </bean>

    <!-- 开启异步线程任务 -->
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="${task.core_pool_size}" />
        <property name="maxPoolSize" value="${task.max_pool_size}" />
        <property name="queueCapacity" value="${task.queue_capacity}" />
        <property name="keepAliveSeconds" value="${task.keep_alive_seconds}" />
    </bean>


    <!-- quartz配置 -->
    <bean id="monthScheduleTask" class="com.ns.warlock.task.MonthScheduleTask"/>

    <!-- 定时执行任务方法 -->
    <bean id="timingScheduleJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="monthScheduleTask" />
        <property name="targetMethod" value="execute" />
    </bean>

    <!-- 调度触发器 -->
    <bean id="timingScheduleTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="timingScheduleJobDetail" />
        <property name="cronExpression" value="${quartz.schedule}" />
    </bean>

    <!-- 调度工厂 -->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false">
        <property name="triggers">
            <list>
                <ref bean="timingScheduleTrigger" />
            </list>
        </property>
    </bean>
</beans>